option solver cbc;
option solution_round 6;

#model .../cut.mod;
#data .../cut.dat;

problem Cutting_Opt: usedPatterns, Cost, FillOrder, StockLimit;
   option relax_integrality 1;
   option presolve 0;

problem Relaxed_Pattern_Gen: Use, Relax, ReducedCost, LengthLimit, RelaxLimit, IsRelaxationAllowed;
	option relax_integrality 0;
	option presolve 1;


for {i in STOCK}
{
	let nPAT[i] := 0;
}

param temp;
for {i in STOCK}
{
	for{ x in ORDERS}
	{
		let temp := floor(stockLengths[i] / orderLengths[x]);
		if temp > 0 then
		{
			let nPAT[i] := nPAT[i] + 1;
			let lfep[i,x,nPAT[i]] := temp;
			let {x2 in ORDERS: x2 <> x} lfep[i,x2,nPAT[i]] := 0;
			let {x2 in ORDERS} rfep[i,x2,nPAT[i]] := 0;
		}
	}
};


param isFeasible;
let isFeasible := 1;
param tempRelax;
param minRelaxCost;
param isNewPattern;
let isNewPattern := 0;
repeat
{
	solve Cutting_Opt;
	let {x in ORDERS} price[x] := FillOrder[x].dual;
	
	for {i in STOCK}
	{
		for {x in ORDERS}
		{
			let tempRelax := ceil(stockLengths[i]/orderLengths[x]) * orderLengths[x] - stockLengths[i];
			let minRelaxCost := (price[x] / orderLengths[x]); #values lower and equal to this will yield results with infinite relaxation
			if tempRelax = 0 or allowBasicPatterns = 1 then
			{
				let relaxCost[x] := minRelaxCost + 0.00001;
			}
			else
			{
				
				let relaxCost[x] := ((price[x] * (tempRelax + stockLengths[i])) / orderLengths[x] - stockCost[i] + StockLimit[i]) / tempRelax + 0.00001; #values lower than this will allow patterns with only one type of orderLength
				if relaxCost[x] <= minRelaxCost then
				{
					let relaxCost[x] := minRelaxCost + 0.00001;
				}
			}
		};
		let rawBarLength := stockLengths[i];
		solve Relaxed_Pattern_Gen;
		if ReducedCost > 0.0001 + stockCost[i] - StockLimit[i] then
		{
			let nPAT[i] := nPAT[i] + 1;
			let {x in ORDERS} lfep[i,x,nPAT[i]] := Use[x];
			let {x in ORDERS} rfep[i,x,nPAT[i]] := Relax[x];
			let isNewPattern := 1;
		}
	}
	
	if isNewPattern = 0 then
	{
		if allowBasicPatterns = 1 then
		{
			break;
		}
		let allowBasicPatterns := 1; #allow looking for a basic patterns (patterns with one type of orderLength)
	}
	
	let isNewPattern := 0;
};



option Cutting_Opt.relax_integrality 0;
option Cutting_Opt.presolve 1;
solve Cutting_Opt;

if solve_result == "infeasible" or solve_result_num == 200 then 
{
	let isFeasible := 0;
}