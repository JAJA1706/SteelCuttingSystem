#option solver cbc;
#option cbc_options 'timelimit=240';
option solution_round 6;

#model minimizeWasteManualFast/cut.mod;
#data minimizeWasteManualFast/cut.dat;

problem Cutting_Opt: usedPatterns, Waste, FillOrder, StockLimit;
   option relax_integrality 1;
   option presolve 0;

problem Pattern_Gen: Use, Relax, StockUse, ReducedCost, LengthLimit, OneStock, MaxRelax;
   option relax_integrality 0;
   option presolve 1;

for {i in STOCK}
{
	let nPAT[i] := 0;
}

param temp;
for {i in STOCK}
{
	for{ x in ORDERS}
	{
		let temp := floor(stockLengths[i] / orderLengths[x]);
		if temp > 0 then
		{
			let nPAT[i] := nPAT[i] + 1;
			let lfep[i,x,nPAT[i]] := temp;
			let {x2 in ORDERS: x2 <> x} lfep[i,x2,nPAT[i]] := 0;
			let {x2 in ORDERS} rfep[i,x2,nPAT[i]] := 0;
		}
	}
};

param isNewPattern;
param prevCreatedPattern {ORDERS};
param minRelaxCost;

let {x in ORDERS} prevCreatedPattern[x] := 0;
let isNewPattern := 0;
repeat
{
	solve Cutting_Opt;
	
	let {x in ORDERS} price[x] := FillOrder[x].dual;
	let {k in STOCK} stockLimit[k] := StockLimit[k].dual;
	
	for {x in ORDERS}
	{
		if relaxCostMultiplier = 1 then
		{
			let relaxCost[x] := 0.00001;
		}
		else
		{
			let minRelaxCost := price[x] / orderLengths[x];
			let relaxCost[x] := (minRelaxCost * 0.75) * relaxCostMultiplier;
			if relaxCost[x] < 0 then
			{
				let relaxCost[x] := 0; 
			}
		}
	}
	
	solve Pattern_Gen;

	for{ x in ORDERS }
	{
		if prevCreatedPattern[x] != Use[x] then
		{
			let isNewPattern := 1;
		}
		let prevCreatedPattern[x] := Use[x];
	}
	
	if ReducedCost < -0.1 && isNewPattern = 1 then 
	{
		for{ i in STOCK }
		{
			let temp := i;
			if StockUse[i] = 1 then
				break;
		}
		
		let nPAT[temp] := nPAT[temp] + 1;
		let {x in ORDERS} lfep[temp,x,nPAT[temp]] := Use[x];
		let {x in ORDERS} rfep[temp,x,nPAT[temp]] := Relax[x];
		let isNewPattern := 0;
	}
	else
		break;
};

option Cutting_Opt.relax_integrality 0;
option Cutting_Opt.presolve 10;
solve Cutting_Opt;

param isFeasible;
let isFeasible := 1;
if solve_result == "infeasible" or solve_result_num == 200 then 
{
	let isFeasible := 0;
}